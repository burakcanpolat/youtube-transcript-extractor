:root {
  --youtube-red: #ff0000;
  --youtube-black: #282828;
  --progress-height: 20px;
}

body {
  font-family: 'Roboto', sans-serif;
  line-height: 1.6;
  color: var(--youtube-black);
}

.navbar-brand {
  color: var(--youtube-red) !important;
  font-weight: 700;
}

.main-container {
  max-width: 800px;
  margin: 2rem auto;
  padding: 0 1rem;
}

.url-input {
  border: 2px solid #e0e0e0;
  border-radius: 4px;
  padding: 0.75rem;
  transition: border-color 0.3s ease;
}

.url-input:focus {
  border-color: var(--youtube-red);
  box-shadow: none;
}

.btn-youtube {
  background-color: var(--youtube-red);
  color: white;
  border: none;
  padding: 0.75rem 1.5rem;
  border-radius: 4px;
  font-weight: 500;
}

.btn-youtube:hover {
  background-color: #cc0000;
  color: white;
}

.transcript-container, .playlist-container {
  margin-top: 2rem;
  padding: 1.5rem;
  border: 1px solid #e0e0e0;
  border-radius: 4px;
  background-color: #fff;
}

.transcript-text {
  white-space: pre-wrap;
  font-size: 1rem;
  line-height: 1.7;
}

.timestamp {
  color: var(--youtube-red);
  font-weight: 500;
  margin-right: 0.5rem;
}

.error-message {
  color: var(--youtube-red);
  padding: 1rem;
  border: 1px solid var(--youtube-red);
  border-radius: 4px;
  margin: 1rem 0;
  display: none;
}

.loading-spinner {
  display: none;
  margin: 2rem auto;
  width: 50px;
  height: 50px;
}

.video-list {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.video-item {
  display: flex;
  gap: 1rem;
  padding: 1rem;
  border: 1px solid #e0e0e0;
  border-radius: 4px;
  align-items: center;
}

.video-select {
  margin-right: 1rem;
  transform: scale(1.2);
}

.video-number {
  font-weight: bold;
  color: var(--youtube-red);
}

.video-info {
  flex-grow: 1;
}

.video-url {
  color: #666;
  margin: 0.5rem 0;
  word-break: break-all;
}

.copy-url {
  padding: 0.25rem 0.75rem;
  font-size: 0.875rem;
}

/* Logs section styles */
.logs-content {
  max-height: 200px;
  overflow-y: auto;
  font-family: monospace;
  font-size: 0.9rem;
  background: #f8f9fa;
  padding: 1rem;
  margin: 0;
  white-space: pre-wrap;
}

.card-header {
  background-color: #f8f9fa;
  border-bottom: 1px solid rgba(0, 0, 0, 0.125);
}

.card-header i {
  transition: transform 0.3s ease;
}

.card-header[aria-expanded="true"] i {
  transform: rotate(180deg);
}

/* Rest of the existing styles */
.progress-phases {
  background-color: #f8f9fa;
  padding: 1.5rem;
  border-radius: 0.5rem;
  border: 1px solid #e0e0e0;
}

.phase-progress {
  margin-bottom: 1.5rem;
}

.phase-label {
  font-weight: 500;
  color: var(--youtube-black);
}

.elapsed-time {
  font-family: monospace;
  color: #666;
}

.progress {
  height: var(--progress-height);
  background-color: #e9ecef;
  border-radius: 0.25rem;
  overflow: hidden;
}

.progress-bar {
  height: 100%;
  background-color: var(--youtube-red);
  color: white;
  text-align: center;
  line-height: var(--progress-height);
  font-size: 0.875rem;
  transition: width 0.3s ease;
}

.progress-bar.bg-danger {
  background-color: #dc3545;
}

.progress-bar.bg-success {
  background-color: #28a745;
}

#current-operation {
  color: #666;
  font-style: italic;
}

#detailed-progress {
  max-height: 200px;
  overflow-y: auto;
  padding: 1rem;
  background-color: #f8f9fa;
  border-radius: 0.25rem;
  border: 1px solid #e0e0e0;
}

.btn-youtube:disabled {
  background-color: #ccc;
  cursor: not-allowed;
}

.d-none {
  display: none !important;
}

@media (max-width: 576px) {
  .main-container {
    margin: 1rem auto;
  }
  
  .btn-youtube {
    width: 100%;
    margin-top: 1rem;
  }
}

/* index.html */
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>YouTube Downloader</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="style.css">
</head>
<body>
  <nav class="navbar navbar-light bg-light">
    <div class="container">
      <a class="navbar-brand" href="#">YouTube Downloader</a>
    </div>
  </nav>
  <div class="main-container">
    <div class="form-group">
      <input type="text" class="form-control url-input" id="url-input" placeholder="Enter YouTube URL">
    </div>
    <button class="btn btn-youtube" id="download-btn">Download</button>
    <div class="error-message" id="error-message"></div>
    <div class="loading-spinner" id="loading-spinner"></div>
    <div id="download-progress" class="mt-3">
      <h5 class="mb-3">Download Progress</h5>
      <div class="progress-phases">
        <div class="phase-progress">
          <span class="phase-label">Video Information</span>
          <div class="progress" id="info-progress">
            <div class="progress-bar bg-success" role="progressbar" style="width: 0%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
          </div>
          <div class="elapsed-time" id="info-elapsed-time"></div>
        </div>
        <div class="phase-progress">
          <span class="phase-label">Downloading</span>
          <div class="progress" id="download-progress-bar">
            <div class="progress-bar bg-success" role="progressbar" style="width: 0%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
          </div>
          <div class="elapsed-time" id="download-elapsed-time"></div>
        </div>
        <div class="phase-progress">
          <span class="phase-label">Converting</span>
          <div class="progress" id="convert-progress-bar">
            <div class="progress-bar bg-success" role="progressbar" style="width: 0%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
          </div>
          <div class="elapsed-time" id="convert-elapsed-time"></div>
        </div>
      </div>
      <div class="progress-item">
        <span class="progress-title">Current Operation:</span>
        <span id="current-operation"></span>
      </div>
      <div class="progress-item">
        <span class="progress-title">Detailed Progress:</span>
        <div id="detailed-progress"></div>
      </div>
    </div>
    <div class="card mt-3" id="logs-container">
      <div class="card-header" id="logs-header">
        <h5 class="mb-0">
          <a class="collapsed" data-toggle="collapse" href="#logs-content" role="button" aria-expanded="false" aria-controls="logs-content">
            Logs <i class="fas fa-chevron-down"></i>
          </a>
        </h5>
      </div>
      <div id="logs-content" class="collapse logs-content">
      </div>
    </div>
    <div class="video-list" id="video-list"></div>
  </div>

  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.min.js"></script>
  <script src="https://kit.fontawesome.com/your-fontawesome-kit-id.js" crossorigin="anonymous"></script>
  <script src="main.js"></script>
</body>
</html>

/* style.css */
:root {
  --youtube-red: #ff0000;
  --youtube-black: #282828;
  --progress-height: 20px;
}

body {
  font-family: 'Roboto', sans-serif;
  line-height: 1.6;
  color: var(--youtube-black);
}

.navbar-brand {
  color: var(--youtube-red) !important;
  font-weight: 700;
}

.main-container {
  max-width: 800px;
  margin: 2rem auto;
  padding: 0 1rem;
}

.url-input {
  border: 2px solid #e0e0e0;
  border-radius: 4px;
  padding: 0.75rem;
  transition: border-color 0.3s ease;
}

.url-input:focus {
  border-color: var(--youtube-red);
  box-shadow: none;
}

.btn-youtube {
  background-color: var(--youtube-red);
  color: white;
  border: none;
  padding: 0.75rem 1.5rem;
  border-radius: 4px;
  font-weight: 500;
}

.btn-youtube:hover {
  background-color: #cc0000;
  color: white;
}

.transcript-container, .playlist-container {
  margin-top: 2rem;
  padding: 1.5rem;
  border: 1px solid #e0e0e0;
  border-radius: 4px;
  background-color: #fff;
}

.transcript-text {
  white-space: pre-wrap;
  font-size: 1rem;
  line-height: 1.7;
}

.timestamp {
  color: var(--youtube-red);
  font-weight: 500;
  margin-right: 0.5rem;
}

.error-message {
  color: var(--youtube-red);
  padding: 1rem;
  border: 1px solid var(--youtube-red);
  border-radius: 4px;
  margin: 1rem 0;
  display: none;
}

.loading-spinner {
  display: none;
  margin: 2rem auto;
  width: 50px;
  height: 50px;
}

.video-list {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.video-item {
  display: flex;
  gap: 1rem;
  padding: 1rem;
  border: 1px solid #e0e0e0;
  border-radius: 4px;
  align-items: center;
}

.video-select {
  margin-right: 1rem;
  transform: scale(1.2);
}

.video-number {
  font-weight: bold;
  color: var(--youtube-red);
}

.video-info {
  flex-grow: 1;
}

.video-url {
  color: #666;
  margin: 0.5rem 0;
  word-break: break-all;
}

.copy-url {
  padding: 0.25rem 0.75rem;
  font-size: 0.875rem;
}

/* Logs section styles */
.logs-content {
  max-height: 200px;
  overflow-y: auto;
  font-family: monospace;
  font-size: 0.9rem;
  background: #f8f9fa;
  padding: 1rem;
  margin: 0;
  white-space: pre-wrap;
}

.card-header {
  background-color: #f8f9fa;
  border-bottom: 1px solid rgba(0, 0, 0, 0.125);
}

.card-header i {
  transition: transform 0.3s ease;
}

.card-header[aria-expanded="true"] i {
  transform: rotate(180deg);
}

/* Rest of the existing styles */
.progress-phases {
  background-color: #f8f9fa;
  padding: 1.5rem;
  border-radius: 0.5rem;
  border: 1px solid #e0e0e0;
}

.phase-progress {
  margin-bottom: 1.5rem;
}

.phase-label {
  font-weight: 500;
  color: var(--youtube-black);
}

.elapsed-time {
  font-family: monospace;
  color: #666;
}

.progress {
  height: var(--progress-height);
  background-color: #e9ecef;
  border-radius: 0.25rem;
  overflow: hidden;
}

.progress-bar {
  height: 100%;
  background-color: var(--youtube-red);
  color: white;
  text-align: center;
  line-height: var(--progress-height);
  font-size: 0.875rem;
  transition: width 0.3s ease;
}

.progress-bar.bg-danger {
  background-color: #dc3545;
}

.progress-bar.bg-success {
  background-color: #28a745;
}

#current-operation {
  color: #666;
  font-style: italic;
}

#detailed-progress {
  max-height: 200px;
  overflow-y: auto;
  padding: 1rem;
  background-color: #f8f9fa;
  border-radius: 0.25rem;
  border: 1px solid #e0e0e0;
}

.btn-youtube:disabled {
  background-color: #ccc;
  cursor: not-allowed;
}

.d-none {
  display: none !important;
}

@media (max-width: 576px) {
  .main-container {
    margin: 1rem auto;
  }
  
  .btn-youtube {
    width: 100%;
    margin-top: 1rem;
  }
}

/* main.js */
document.addEventListener('DOMContentLoaded', () => {
  const urlInput = document.getElementById('url-input');
  const downloadBtn = document.getElementById('download-btn');
  const errorMessage = document.getElementById('error-message');
  const loadingSpinner = document.getElementById('loading-spinner');
  const downloadProgress = document.getElementById('download-progress');
  const infoProgress = document.getElementById('info-progress');
  const downloadProgressBar = document.getElementById('download-progress-bar');
  const convertProgressBar = document.getElementById('convert-progress-bar');
  const infoElapsedTime = document.getElementById('info-elapsed-time');
  const downloadElapsedTime = document.getElementById('download-elapsed-time');
  const convertElapsedTime = document.getElementById('convert-elapsed-time');
  const currentOperation = document.getElementById('current-operation');
  const detailedProgress = document.getElementById('detailed-progress');
  const logsContent = document.getElementById('logs-content');

  downloadBtn.addEventListener('click', () => {
    const url = urlInput.value;
    if (!url) {
      errorMessage.textContent = 'Please enter a YouTube URL.';
      errorMessage.style.display = 'block';
      return;
    }

    errorMessage.style.display = 'none';
    loadingSpinner.style.display = 'block';
    downloadBtn.disabled = true;

    // Simulate download process (replace with actual download logic)
    const downloadProgressInterval = setInterval(() => {
      const progress = Math.floor(Math.random() * 100);
      downloadProgressBar.style.width = `${progress}%`;
      downloadProgressBar.ariaValuenow = progress;
      downloadElapsedTime.textContent = `Elapsed Time: ${Math.floor(Math.random() * 10) + 1}s`;

      // Logs section update
      logsContent.innerHTML += `[${new Date().toLocaleTimeString()}] Downloading: ${progress}% complete\n`;

      if (progress >= 100) {
        clearInterval(downloadProgressInterval);
        downloadProgressBar.classList.remove('bg-success');
        downloadProgressBar.classList.add('bg-success');

        // Simulate conversion process
        const conversionProgressInterval = setInterval(() => {
          const conversionProgress = Math.floor(Math.random() * 100);
          convertProgressBar.style.width = `${conversionProgress}%`;
          convertProgressBar.ariaValuenow = conversionProgress;
          convertElapsedTime.textContent = `Elapsed Time: ${Math.floor(Math.random() * 5) + 1}s`;

          // Logs section update
          logsContent.innerHTML += `[${new Date().toLocaleTimeString()}] Converting: ${conversionProgress}% complete\n`;

          if (conversionProgress >= 100) {
            clearInterval(conversionProgressInterval);
            convertProgressBar.classList.remove('bg-success');
            convertProgressBar.classList.add('bg-success');
            loadingSpinner.style.display = 'none';
            downloadBtn.disabled = false;
            // Logs section update
            logsContent.innerHTML += `[${new Date().toLocaleTimeString()}] Download complete!\n`;
            alert('Download complete!');
          }
        }, 1000); // Simulate 1 second intervals for conversion
      }
    }, 1000); // Simulate 1 second intervals for download
  });
});